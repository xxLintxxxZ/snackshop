{"version":3,"sources":["components/Todos.js","App.js","reportWebVitals.js","index.js"],"names":["Todos","useState","todos","setTodos","useEffect","fetchTodo","a","fetch","response","json","map","todo","subject","id","App","props","setPosts","token","setToken","login","username","password","method","headers","body","JSON","stringify","data","access","getTodos","addTodo","details","deleteTodo","className","onClick","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAwCiBA,MAlCjB,WACI,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAnBAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,gCADb,cACVC,EADU,gBAEIA,EAASC,OAFb,OAEVP,EAFU,OAGhBC,EAASD,GAHO,2CAAH,qDAMfG,MACC,IAYD,6BACGH,EAAMQ,KAAI,SAACC,GAAD,OACT,6BAAmBA,EAAKC,SAAfD,EAAKE,U,MC2DTC,MAvFf,SAAaC,GAEX,IAEA,EAA0Bd,mBAAS,IAAnC,mBAAce,GAAd,WAEA,EAA0Bf,mBAAS,IAAnC,mBAAOgB,EAAP,KAAcC,EAAd,KAGMC,EAAK,uCAAG,WAAOC,EAAUC,GAAjB,iBAAAf,EAAA,sEACWC,MAAM,mCAAoC,CAC/De,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBN,WACAC,eARQ,cACNb,EADM,gBAYOA,EAASC,OAZhB,OAYNkB,EAZM,OAcZT,EAASS,EAAKC,QAdF,2CAAH,wDAkBPC,EAAQ,uCAAG,8BAAAvB,EAAA,sEACQC,MA1BX,gCAyBG,cACTC,EADS,gBAEIA,EAASC,OAFb,OAETkB,EAFS,OAGfX,EAASW,GAHM,2CAAH,qDAWdvB,qBAAU,WACRyB,MACC,IAGD,IAAMC,EAAO,uCAAG,4BAAAxB,EAAA,6DACRkB,EAAOC,KAAKC,UAAU,CAC1Bd,QAAS,OAAQmB,QAAS,aAFd,SAKRxB,MAAM,+BAAgC,CAC1Ce,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAYN,GAE/BO,SAXY,2CAAH,qDAePQ,EAAU,uCAAG,sBAAA1B,EAAA,sEACXC,MAAM,iCAAkC,CAC5Ce,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAYN,KALhB,2CAAH,qDAWhB,OACE,sBAAKgB,UAAU,MAAf,UAEA,uCACE,wBAAQC,QAAS,kBAAMf,EAAM,QAASgB,aAAtC,mBACE,cAAC,EAAD,IAMF,wBAAQD,QAAS,kBAAMJ,KAAvB,iBACA,wBAAQI,QAAS,kBAAMF,KAAvB,wBC3ESI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c08162dc.chunk.js","sourcesContent":["\n// import { useQuery, useQueryClient } from \"react-query\";\nimport { useState, useEffect } from \"react\";\n\n\n\nfunction Todos() {\n    const [todos, setTodos] = useState([]);\n  \n    // const queryClient = useQueryClient();\n    // const { status, data } = useQuery(\"todos\", fetchTodo);\n  \n    useEffect(() => {\n      const fetchTodo = async () => {\n        const response = await fetch(\"http://localhost:8000/todos/\");\n        const todos = await response.json();\n        setTodos(todos)\n      };\n  \n      fetchTodo();\n    }, [])\n  \n   //if i fetch (\"http://localhost:8000/todo/\"). typo in address u see the below status;\n    // if (status === \"loading\") {\n    //   return <span>Loading...</span>;\n    // }\n  \n    // if (status === \"error\") {\n    //   return <span>Error</span>;\n    // }\n   \n    return (\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo.id}>{todo.subject}</li>\n        ))}\n      </ul>\n    );\n  }\n  \n  export default Todos;\n  ","import Todos from './components/Todos';\nimport './App.css';\nimport { useState, useEffect } from \"react\"\nimport { Route} from \"react-router-dom\";\nimport Form from './pages/Form';\n\nfunction App(props) {\n  \n  const url = \"http://localhost:8000/todos/\"\n\n  const [posts, setPosts] = useState([]);\n\n  const [token, setToken] = useState('')\n  // const queryClient = useQueryClient();\n  // import { useQueryClient } from \"react-query\";\n  const login = async (username, password) => {\n    const response = await fetch(\"http://localhost:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username,\n        password,\n      }),\n    });\n\n    const data = await response.json();\n    //console.log(data)\n    setToken(data.access);\n  };\n\n// Function to get list of Todos from API\nconst getTodos = async () => {\n  const response = await fetch(url);\n  const data = await response.json();\n  setPosts(data);\n};\n\n//////////////\n// useEffects\n//////////////\n\n// useEffect to get list of todos when page loads\nuseEffect(() => {\n  getTodos();\n}, []);\n  \n  \n  const addTodo = async () => {\n    const body = JSON.stringify({\n      subject: \"Test\", details: \"New todo\"\n    });\n\n    await fetch(\"http://localhost:8000/todos/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n      body,\n    }); \n  }\n\n  const deleteTodo = async () => {\n    await fetch(\"http://localhost:8000/todos/10\", {\n      method: \"delete\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + token\n      },\n     \n    }); \n  }\n\n  return (\n    <div className=\"App\">\n      \n    <h1>Todos</h1>\n      <button onClick={() => login(\"admin\", process.env.REACT_APP_NOT_SECRET_CODE)}>Login</button>\n        <Todos/>\n        {/* <Route\n          exact\n          path=\"/new\"\n          render={(routerProps) => <Form {...routerProps} posts={posts} />}\n        /> */}\n      <button onClick={() => addTodo()}>Add</button>\n      <button onClick={() => deleteTodo()}>Delete</button>\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import {queryClient, QueryClientProvider} from \"react-query\"\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <QueryClientProvider client={queryClient}> */}\n    <App />\n    {/* </QueryClientProvider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}